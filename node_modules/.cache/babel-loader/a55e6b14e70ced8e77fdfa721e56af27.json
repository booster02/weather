{"ast":null,"code":"var _jsxFileName = \"/home/bela/TPL/frontend-challenges/js/03_react/weather/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport \"./components/fore-cast\";\nimport { MainPart } from \"./components/main-part\";\nimport { CastType, ForeCast } from \"./components/fore-cast\";\nimport { useFetch, useFetchLocation } from \"./utils/Hooks/useFetch\";\nimport useLocation from \"./utils/Hooks/useLocation\";\nimport { getWeatherStatus, getWeatherType, WeatherType } from \"./utils/GetWeatherType\";\nimport { useInterval } from \"./utils/Hooks/useInterval\";\nimport { timeZoneOffset } from \"./utils/constant\";\nimport { addHours } from \"./utils/time/addHours\";\nimport { getDayPreviews, getHourPreviews } from \"./utils/previews/hourPreviews\";\nimport { getDayFromDate, getDayFromString } from \"./utils/time/formatTime\";\nimport { LocationBar } from \"./components/location-bar\";\nimport useDebounce from \"./utils/Hooks/useDebounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentTimeExact, setCurrentTimeExact] = useState(addHours(timeZoneOffset).toISOString().substring(0, 19));\n  const [previewIndex, setPreviewIndex] = useState(-1);\n  const [previewDataDay, setPreviewDataDay] = useState(null);\n  const [previewDataWeek, setPreviewDataWeek] = useState();\n  const currentTime = currentTimeExact.substring(0, 16);\n  const [currentCoords, setCoords] = useLocation(null);\n  const [currentCity, setCurrentCity] = useState(null);\n  const url = currentCoords && `https://api.open-meteo.com/v1/forecast?latitude=${currentCoords[0]}&longitude=${currentCoords[1]}&hourly=temperature_2m,weathercode&daily=temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,rain_sum,showers_sum,snowfall_sum,windspeed_10m_max,windgusts_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin`;\n  const [inputCity, setInputCity] = useState(\"\");\n  const [locationURL] = useDebounce(`https://geocoding-api.open-meteo.com/v1/search?name=${inputCity}&count=5`, 300);\n  const locations = useFetchLocation(locationURL);\n  const allData = useFetch(url);\n  useEffect(() => {\n    if (previewIndex === -1 || allData === null) {\n      setPreviewDataDay(null);\n    } else if (allData != null) {\n      const newPreviewData = getHourPreviews(allData.hourly, allData.hourly.time[previewIndex]);\n      setPreviewDataDay({\n        previewData: newPreviewData,\n        headline: getDayFromString(allData.hourly.time[previewIndex]) + \" - Ganzer Tag\"\n      });\n    }\n  }, [previewIndex, allData]);\n  useEffect(() => {\n    if (previewIndex === -1 && allData != null) {\n      setPreviewDataWeek({\n        previewData: getDayPreviews(allData.daily),\n        headline: \"Diese Woche\"\n      });\n    }\n  }, [previewIndex, allData]);\n  useInterval(() => setCurrentTimeExact(addHours(timeZoneOffset + 1 / 60, new Date(currentTime)).toISOString().substring(0, 19)), 60000);\n\n  function getIconURL(code) {\n    let weatherType = getWeatherType(code);\n    weatherType = weatherType === WeatherType.FREEZING_RAIN ? WeatherType.RAIN : weatherType;\n    return `./assets/icons/${weatherType}.svg`;\n  }\n\n  function getBackgroundUrl(code) {\n    let weatherType = getWeatherType(code);\n    weatherType = weatherType == WeatherType.FREEZING_RAIN ? WeatherType.RAIN : weatherType;\n    let url = `url(./assets/backgrounds/${weatherType}.png)`;\n    return url;\n  }\n\n  function roundTime(currentTime) {\n    return currentTime.substring(0, 14) + \"00\";\n  }\n\n  function changePreviewIndex(day) {\n    let index = allData ? allData.hourly.time.indexOf(day) : 0;\n    setPreviewIndex(index);\n  }\n\n  getDayFromDate(new Date(Date.now()));\n  if (!allData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app screen-overlay\",\n    style: {\n      backgroundImage: getBackgroundUrl(allData.hourly.weathercode[allData.hourly.time.indexOf(roundTime(currentTime))])\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainPart, {\n      currentTime: currentTime,\n      getWeatherStatus: getWeatherStatus,\n      hourly: allData.hourly,\n      getIconURL: getIconURL,\n      city: currentCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"cityHeadline\",\n      children: \"Change your city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LocationBar, {\n      setLocationInput: setInputCity,\n      cities: locations,\n      setCurrentCoords: setCoords,\n      setCity: setCurrentCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForeCast, {\n      castType: CastType.HOURLY,\n      previewData: getHourPreviews(allData.hourly),\n      changePreviewIndex: changePreviewIndex,\n      headline: \"Rest des Tages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForeCast, {\n      castType: CastType.DAILY,\n      previewData: previewDataWeek ? previewDataWeek.previewData : null,\n      changePreviewIndex: changePreviewIndex,\n      headline: previewDataWeek ? previewDataWeek.headline : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForeCast, {\n      previewData: previewDataDay ? previewDataDay.previewData : null,\n      castType: CastType.FULLDAY,\n      changePreviewIndex: changePreviewIndex,\n      headline: previewDataDay ? previewDataDay.headline : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"Yxhv48glPr9+K/4Oiw2JxuY+5O4=\", false, function () {\n  return [useLocation, useDebounce, useFetchLocation, useFetch, useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MainPart","CastType","ForeCast","useFetch","useFetchLocation","useLocation","getWeatherStatus","getWeatherType","WeatherType","useInterval","timeZoneOffset","addHours","getDayPreviews","getHourPreviews","getDayFromDate","getDayFromString","LocationBar","useDebounce","App","currentTimeExact","setCurrentTimeExact","toISOString","substring","previewIndex","setPreviewIndex","previewDataDay","setPreviewDataDay","previewDataWeek","setPreviewDataWeek","currentTime","currentCoords","setCoords","currentCity","setCurrentCity","url","inputCity","setInputCity","locationURL","locations","allData","newPreviewData","hourly","time","previewData","headline","daily","Date","getIconURL","code","weatherType","FREEZING_RAIN","RAIN","getBackgroundUrl","roundTime","changePreviewIndex","day","index","indexOf","now","backgroundImage","weathercode","HOURLY","DAILY","FULLDAY"],"sources":["/home/bela/TPL/frontend-challenges/js/03_react/weather/src/App.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport \"./components/fore-cast\"\nimport {MainPart} from \"./components/main-part\";\nimport {CastType, ForeCast} from \"./components/fore-cast\";\nimport {useFetch, useFetchLocation} from \"./utils/Hooks/useFetch\";\nimport useLocation from \"./utils/Hooks/useLocation\";\nimport {getWeatherStatus, getWeatherType, WeatherType} from \"./utils/GetWeatherType\";\nimport {useInterval} from \"./utils/Hooks/useInterval\"\nimport {timeZoneOffset} from \"./utils/constant\";\nimport {addHours} from \"./utils/time/addHours\";\nimport {getDayPreviews, getHourPreviews, previewData} from \"./utils/previews/hourPreviews\";\nimport {getDayFromDate, getDayFromString} from \"./utils/time/formatTime\";\nimport {LocationBar} from \"./components/location-bar\";\nimport useDebounce from \"./utils/Hooks/useDebounce\";\n\ninterface previewsData {\n    previewData: previewData[];\n    headline: string;\n}\n\nfunction App() {\n    const [currentTimeExact, setCurrentTimeExact] = useState(addHours(timeZoneOffset).toISOString().substring(0, 19));\n    const [previewIndex, setPreviewIndex] = useState<number>(-1);\n    const [previewDataDay, setPreviewDataDay] = useState<previewsData | null>(null)\n    const [previewDataWeek, setPreviewDataWeek] = useState<previewsData | null>()\n    const currentTime = currentTimeExact.substring(0, 16);\n    const [currentCoords, setCoords] = useLocation(null);\n    const [currentCity, setCurrentCity] = useState<string | null>(null);\n    const url = currentCoords && `https://api.open-meteo.com/v1/forecast?latitude=${currentCoords[0]}&longitude=${currentCoords[1]}&hourly=temperature_2m,weathercode&daily=temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,rain_sum,showers_sum,snowfall_sum,windspeed_10m_max,windgusts_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin`;\n    const [inputCity, setInputCity] = useState(\"\");\n    const [locationURL] = useDebounce(`https://geocoding-api.open-meteo.com/v1/search?name=${inputCity}&count=5`, 300);\n    const locations = useFetchLocation(locationURL);\n    const allData = useFetch(url);\n\n    useEffect(() => {\n        if (previewIndex === -1 || allData === null) {\n            setPreviewDataDay(null)\n        } else if (allData != null) {\n            const newPreviewData = getHourPreviews(allData.hourly, allData.hourly.time[previewIndex]);\n            setPreviewDataDay({\n                previewData: newPreviewData,\n                headline: getDayFromString(allData.hourly.time[previewIndex]) + \" - Ganzer Tag\"\n            });\n        }\n    }, [previewIndex, allData])\n\n    useEffect(() => {\n        if (previewIndex === -1 && allData != null) {\n            setPreviewDataWeek({previewData: getDayPreviews(allData.daily), headline: \"Diese Woche\"})\n        }\n    }, [previewIndex, allData])\n\n    useInterval(() => setCurrentTimeExact(addHours(timeZoneOffset + 1 / (60), new Date(currentTime)).toISOString().substring(0, 19)), 60000)\n\n\n    function getIconURL(code: number) {\n        let weatherType = getWeatherType(code);\n        weatherType = weatherType === WeatherType.FREEZING_RAIN ? WeatherType.RAIN : weatherType;\n\n        return `./assets/icons/${weatherType}.svg`;\n    }\n\n    function getBackgroundUrl(code: number) {\n        let weatherType = getWeatherType(code)\n        weatherType = weatherType == WeatherType.FREEZING_RAIN ? WeatherType.RAIN : weatherType;\n        let url = `url(./assets/backgrounds/${weatherType}.png)`;\n        return url;\n    }\n\n    function roundTime(currentTime: string) {\n        return currentTime.substring(0, 14) + \"00\";\n    }\n\n    function changePreviewIndex(day: string) {\n        let index = allData ? allData.hourly.time.indexOf(day) : 0;\n        setPreviewIndex(index);\n    }\n\n    getDayFromDate(new Date(Date.now()))\n    if (!allData) return <div className=\"loader\"/>\n    return (<div className=\"app screen-overlay\"\n                 style={{backgroundImage: getBackgroundUrl(allData.hourly.weathercode[allData.hourly.time.indexOf(roundTime(currentTime))])}}>\n        <MainPart currentTime={currentTime} getWeatherStatus={getWeatherStatus} hourly={allData.hourly}\n                  getIconURL={getIconURL} city={currentCity}/>\n        <h2 className={\"cityHeadline\"}>Change your city</h2>\n        <LocationBar setLocationInput={setInputCity} cities={locations} setCurrentCoords={setCoords}\n                     setCity={setCurrentCity}/>\n        <ForeCast castType={CastType.HOURLY} previewData={getHourPreviews(allData.hourly)}\n                  changePreviewIndex={changePreviewIndex} headline={\"Rest des Tages\"}/>\n        <ForeCast castType={CastType.DAILY} previewData={previewDataWeek ? previewDataWeek.previewData : null}\n                  changePreviewIndex={changePreviewIndex} headline={previewDataWeek ? previewDataWeek.headline : \"\"}/>\n        <ForeCast previewData={previewDataDay ? previewDataDay.previewData : null} castType={CastType.FULLDAY}\n                  changePreviewIndex={changePreviewIndex} headline={previewDataDay ? previewDataDay.headline : \"\"}/>\n    </div>);\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}