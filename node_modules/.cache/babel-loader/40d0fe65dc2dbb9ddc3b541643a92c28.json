{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nexport function useFetch(url) {\n  _s();\n\n  const cache = useRef();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    async function getData() {\n      if (!url) return;\n\n      if (cache.current) {\n        const response = cache.current;\n        setData(response);\n        return;\n      }\n\n      try {\n        let response = await fetch(url);\n        let data = await response.json();\n        cache.current = data;\n        setData(data);\n        console.log(data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    void getData();\n    return () => {\n      setData(null);\n      cache.current = null;\n    };\n  }, [url]);\n  return data;\n}\n\n_s(useFetch, \"WG0zTqP4de9m2velW0TqzU23kdo=\");\n\nexport function useFetchLocation(url) {\n  _s2();\n\n  const cache = useRef();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    async function getData() {\n      if (!url) return;\n\n      if (cache.current) {\n        const response = cache.current;\n        setData(response);\n        return;\n      }\n\n      try {\n        let response = await fetch(url);\n        let data = await response.json();\n        cache.current = data;\n        setData(data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    void getData();\n    return () => {\n      setData(null);\n      cache.current = null;\n    };\n  }, [url]);\n  return data;\n}\n\n_s2(useFetchLocation, \"WG0zTqP4de9m2velW0TqzU23kdo=\");","map":{"version":3,"names":["useEffect","useRef","useState","useFetch","url","cache","data","setData","getData","current","response","fetch","json","console","log","e","useFetchLocation"],"sources":["/home/bela/TPL/frontend-challenges/js/03_react/weather/src/utils/Hooks/useFetch.tsx"],"sourcesContent":["import {useEffect, useRef, useState} from \"react\";\n\ninterface responseItem {\n    daily: {\n        time: string[];\n        temperature_2m_max: number[];\n        temperature_2m_min: number[];\n    }\n    hourly: {\n        temperature_2m: number[];\n        weathercode: number[];\n        time: string[]\n    }\n}\n\nexport function useFetch(url: string | null) {\n    const cache = useRef<responseItem | null>()\n    const [data, setData] = useState<responseItem | null>(null);\n    useEffect(() => {\n        async function getData(): Promise<void> {\n            if (!url) return;\n            if (cache.current) {\n                const response = cache.current;\n                setData(response);\n                return;\n            }\n            try {\n                let response = await fetch(url);\n                let data = await response.json();\n                cache.current = data;\n                setData(data);\n                console.log(data);\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        void getData();\n        return () => {\n            setData(null);\n            cache.current = null;\n        }\n    }, [url]);\n    return data;\n}\nexport interface cityInformation {\n    admin1: string,\n    admin1_id: number,\n    admin2?: string,\n    admin2_id?: number,\n    admin3?: string,\n    admin3_id?: number,\n    country: string,\n    country_code: string,\n    country_id: number,\n    elevation: number,\n    feature_code: string,\n    id: number,\n    latitude: number,\n    longitude: number,\n    name: string,\n    population: number\n}\nexport interface locationResponse {\n    results: [cityInformation],\n    generationtime_ms: number\n}\n\nexport function useFetchLocation(url: string) {\n    const cache = useRef<locationResponse | null>()\n    const [data, setData] = useState<locationResponse | null>(null);\n    useEffect(() => {\n        async function getData(): Promise<void> {\n            if (!url) return;\n            if (cache.current) {\n                const response = cache.current;\n                setData(response);\n                return;\n            }\n            try {\n                let response = await fetch(url);\n                let data = await response.json();\n                cache.current = data;\n                setData(data);\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        void getData();\n        return () => {\n            setData(null);\n            cache.current = null;\n        }\n    }, [url]);\n    return data;\n}\n"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;AAeA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAsC;EAAA;;EACzC,MAAMC,KAAK,GAAGJ,MAAM,EAApB;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAsB,IAAtB,CAAhC;EACAF,SAAS,CAAC,MAAM;IACZ,eAAeQ,OAAf,GAAwC;MACpC,IAAI,CAACJ,GAAL,EAAU;;MACV,IAAIC,KAAK,CAACI,OAAV,EAAmB;QACf,MAAMC,QAAQ,GAAGL,KAAK,CAACI,OAAvB;QACAF,OAAO,CAACG,QAAD,CAAP;QACA;MACH;;MACD,IAAI;QACA,IAAIA,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA1B;QACA,IAAIE,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAjB;QACAP,KAAK,CAACI,OAAN,GAAgBH,IAAhB;QACAC,OAAO,CAACD,IAAD,CAAP;QACAO,OAAO,CAACC,GAAR,CAAYR,IAAZ;MACH,CAND,CAME,OAAOS,CAAP,EAAU;QACRF,OAAO,CAACC,GAAR,CAAYC,CAAZ;MACH;IACJ;;IAED,KAAKP,OAAO,EAAZ;IACA,OAAO,MAAM;MACTD,OAAO,CAAC,IAAD,CAAP;MACAF,KAAK,CAACI,OAAN,GAAgB,IAAhB;IACH,CAHD;EAIH,CAxBQ,EAwBN,CAACL,GAAD,CAxBM,CAAT;EAyBA,OAAOE,IAAP;AACH;;GA7BeH,Q;;AAqDhB,OAAO,SAASa,gBAAT,CAA0BZ,GAA1B,EAAuC;EAAA;;EAC1C,MAAMC,KAAK,GAAGJ,MAAM,EAApB;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAA0B,IAA1B,CAAhC;EACAF,SAAS,CAAC,MAAM;IACZ,eAAeQ,OAAf,GAAwC;MACpC,IAAI,CAACJ,GAAL,EAAU;;MACV,IAAIC,KAAK,CAACI,OAAV,EAAmB;QACf,MAAMC,QAAQ,GAAGL,KAAK,CAACI,OAAvB;QACAF,OAAO,CAACG,QAAD,CAAP;QACA;MACH;;MACD,IAAI;QACA,IAAIA,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA1B;QACA,IAAIE,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAjB;QACAP,KAAK,CAACI,OAAN,GAAgBH,IAAhB;QACAC,OAAO,CAACD,IAAD,CAAP;MACH,CALD,CAKE,OAAOS,CAAP,EAAU;QACRF,OAAO,CAACC,GAAR,CAAYC,CAAZ;MACH;IACJ;;IAED,KAAKP,OAAO,EAAZ;IACA,OAAO,MAAM;MACTD,OAAO,CAAC,IAAD,CAAP;MACAF,KAAK,CAACI,OAAN,GAAgB,IAAhB;IACH,CAHD;EAIH,CAvBQ,EAuBN,CAACL,GAAD,CAvBM,CAAT;EAwBA,OAAOE,IAAP;AACH;;IA5BeU,gB"},"metadata":{},"sourceType":"module"}